#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <cstring>

int main() {
    int pipefd[2];
    pid_t pid;
    const char* message = "Hello from parent process via pipe!\n";

    // Create pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        return 1;
    }

    pid = fork();

    if (pid < 0) {
        perror("fork");
        return 1;
    }

    if (pid > 0) {
        // Parent process
        close(pipefd[0]); // Close unused read end
        write(pipefd[1], message, strlen(message)); // Write message
        close(pipefd[1]); // Close write end after writing
        wait(NULL);       // Wait for child
    } else {
        // Child process
        close(pipefd[1]); // Close unused write end

        // Redirect stdin to read from pipe
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);

        // Execute 'cat' which reads from stdin (now pipe)
        execlp("cat", "cat", nullptr);

        // If execlp fails
        perror("execlp");
        return 1;
    }

    return 0;
}

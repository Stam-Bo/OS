#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

void fifo(vector<int> requests, int head) {
    int total = 0;
    cout << "\nFIFO Order: ";
    for (int r : requests) {
        cout << r << " ";
        total += abs(r - head);
        head = r;
    }
    cout << "\nTotal seek time (FIFO): " << total << endl;
}

void sstf(vector<int> requests, int head) {
    vector<bool> visited(requests.size(), false);
    int total = 0;

    cout << "\nSSTF Order: ";
    for (int i = 0; i < requests.size(); ++i) {
        int minDist = INT_MAX, index = -1;
        for (int j = 0; j < requests.size(); ++j) {
            if (!visited[j] && abs(requests[j] - head) < minDist) {
                minDist = abs(requests[j] - head);
                index = j;
            }
        }
        visited[index] = true;
        total += abs(requests[index] - head);
        head = requests[index];
        cout << head << " ";
    }
    cout << "\nTotal seek time (SSTF): " << total << endl;
}

void scan(vector<int> requests, int head, int diskSize) {
    vector<int> left, right;
    for (int r : requests) {
        if (r < head) left.push_back(r);
        else right.push_back(r);
    }

    sort(left.begin(), left.end());
    sort(right.begin(), right.end());

    int total = 0;
    cout << "\nSCAN Order: ";

    for (int r : right) {
        cout << r << " ";
        total += abs(r - head);
        head = r;
    }

    if (!left.empty()) {
        total += abs(diskSize - 1 - head);
        head = diskSize - 1;
        for (int i = left.size() - 1; i >= 0; --i) {
            cout << left[i] << " ";
            total += abs(left[i] - head);
            head = left[i];
        }
    }

    cout << "\nTotal seek time (SCAN): " << total << endl;
}

void cscan(vector<int> requests, int head, int diskSize) {
    vector<int> left, right;
    for (int r : requests) {
        if (r < head) left.push_back(r);
        else right.push_back(r);
    }

    sort(left.begin(), left.end());
    sort(right.begin(), right.end());

    int total = 0;
    cout << "\nC-SCAN Order: ";

    for (int r : right) {
        cout << r << " ";
        total += abs(r - head);
        head = r;
    }

    if (!left.empty()) {
        total += abs((diskSize - 1) - head); // to end
        total += diskSize - 1; // to start
        head = 0;

        for (int r : left) {
            cout << r << " ";
            total += abs(r - head);
            head = r;
        }
    }

    cout << "\nTotal seek time (C-SCAN): " << total << endl;
}

int main() {
    int n, head, diskSize;
    vector<int> requests;

    cout << "Enter number of disk requests: ";
    cin >> n;

    requests.resize(n);
    cout << "Enter disk requests: ";
    for (int i = 0; i < n; ++i) cin >> requests[i];

    cout << "Enter initial head position: ";
    cin >> head;

    cout << "Enter total disk size (e.g. 200): ";
    cin >> diskSize;

    fifo(requests, head);
    sstf(requests, head);
    scan(requests, head, diskSize);
    cscan(requests, head, diskSize);

    return 0;
}

#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list> // ðŸ”§ Needed for LRU

using namespace std;

// Function to implement FCFS page replacement
void FCFS(vector<int> pages, int capacity) {
    queue<int> q;
    unordered_set<int> inMemory;
    int faults = 0;

    for (int page : pages) {
        if (inMemory.find(page) == inMemory.end()) {
            faults++;
            if ((int)q.size() == capacity) {
                int old = q.front(); q.pop();
                inMemory.erase(old);
            }
            q.push(page);
            inMemory.insert(page);
        }
    }

    cout << "\nFCFS Page Faults: " << faults << endl;
}

// Function to implement LRU page replacement
void LRU(vector<int> pages, int capacity) {
    list<int> lru;
    unordered_map<int, list<int>::iterator> inMemory;
    int faults = 0;

    for (int page : pages) {
        if (inMemory.find(page) == inMemory.end()) {
            faults++;
            if ((int)lru.size() == capacity) {
                int last = lru.back(); lru.pop_back();
                inMemory.erase(last);
            }
        } else {
            lru.erase(inMemory[page]);
        }
        lru.push_front(page);
        inMemory[page] = lru.begin();
    }

    cout << "LRU Page Faults: " << faults << endl;
}

// Function to implement Optimal page replacement
void Optimal(vector<int> pages, int capacity) {
    vector<int> memory;
    int faults = 0;

    for (size_t i = 0; i < pages.size(); i++) {
        int page = pages[i];
        auto it = find(memory.begin(), memory.end(), page);

        if (it == memory.end()) {
            faults++;
            if ((int)memory.size() < capacity) {
                memory.push_back(page);
            } else {
                int idxToReplace = 0, farthest = -1;
                for (int j = 0; j < capacity; j++) {
                    int k;
                    for (k = i + 1; k < (int)pages.size(); k++) {
                        if (pages[k] == memory[j]) break;
                    }
                    if (k > farthest) {
                        farthest = k;
                        idxToReplace = j;
                    }
                }
                memory[idxToReplace] = page;
            }
        }
    }

    cout << "Optimal Page Faults: " << faults << endl;
}

// Main function
int main() {
    int n, capacity;
    cout << "Enter number of pages: ";
    cin >> n;

    vector<int> pages(n);
    cout << "Enter page reference string: ";
    for (int i = 0; i < n; ++i) {
        cin >> pages[i];
    }

    cout << "Enter number of frames: ";
    cin >> capacity;

    FCFS(pages, capacity);
    LRU(pages, capacity);
    Optimal(pages, capacity);

    return 0;
}
